#!/usr/bin/env python
import argparse
import os
import subprocess

parser = argparse.ArgumentParser(description="This module can encrypt and descrypt strings with RSA.")
parser.add_argument("key", help="The key to encrypt/decrypt the string with.")
parser.add_argument("-e", "--encrypt", help="Encrypt a string")
parser.add_argument("-d", "--decrypt", help="Decrypt an encrypted string")
parser.add_argument("-v", "--verbose", help="Increase output verbosity.",
                    action="store_true")
args = parser.parse_args()

FILENAME = "../temp.encryption-module"


def vprint(*rgs, **kwrgs):
    if args.verbose:
        print(" ".join(map(str, rgs)), **kwrgs)


def to_file(text):
    with open(FILENAME, "w") as file:
        file.write(text)


def remove_file():
    os.remove(FILENAME)


def read_file(filename):
    output = ""
    with open(filename) as file:
        for line in file.readlines():
            output += line + "\n"
    return output[:-1]


def encrypt(key, string):
    to_file(string)
    command = ["gpg", "--pinentry-mode=loopback", "--no-symkey-cache", "--passphrase", key, "--symmetric",
               "--cipher-algo", "AES256", FILENAME]
    subprocess.run(command)

    return True


def get_formatted_command(command):
    result = ""
    for x in command:
        result += x.replace(" ", "\\ ") + " "
    return result[:-1]


def decrypt(key, string):
    output_filename = "../output.txt"
    command = ["gpg", "--pinentry-mode=loopback", "--passphrase", key, "-o", output_filename,
               "--decrypt", string]
    vprint("Running command:", get_formatted_command(command))
    subprocess.run(command)
    return read_file("../message.txt")


if args.encrypt is not None:
    vprint(f"Encrypting {args.encrypt} with {args.key}.")
    print(encrypt(args.key, args.encrypt))
    quit(0)
elif args.decrypt is not None:
    vprint(f"Decrypting {args.decrypt} with {args.key}.")
    print(decrypt(args.key, args.decrypt))
    quit(0)
else:
    print("No action specified.")
    quit(1)
